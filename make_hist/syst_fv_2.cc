#include <vector>
void syst_fv_2(){
  string sk_period = "sk3";
  bool add_signal = false;
  float signal_scale = 0.03;

  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(0);
  vector<string> hist;
  vector<vector<string>> hist_set;
  vector<vector<int>> input_type_set,mode_type_set;
  vector<int> scale,dology,input_type,mode_type,add_ratio,dorebin;
  hist.clear();hist_set.clear();scale.clear();dology.clear();dorebin.clear();input_type.clear();input_type_set.clear();add_ratio.clear();
  mode_type_set.clear();mode_type.clear();
  vector<string> hist_name;
  hist_name.clear();

  TH1 *first_hist;
  TFile *input_mc = TFile::Open(Form("../output/fcmc_final.%s.mode_subgev_multiring.root",sk_period.c_str()));//mc
  TFile *input_data = TFile::Open(Form("../output/fcdt_final.%s.mode_subgev_multiring.root",sk_period.c_str()));//mc
  TH1* hist_mc = (TH1*) input_mc->Get("distance_to_wall_thr50");
  TH1* hist_data = (TH1*) input_data->Get("distance_to_wall_thr50");
  hist_data->SetLineWidth(2);
  hist_mc->SetLineWidth(2);
  //cout << hist_mc->GetEntries() << "/" << hist_data->GetEntries() << endl;
  TCanvas *c1 = new TCanvas("c1","",800,600);
  TPad* p1 = new TPad("main","main",0.0,0.2,1.0,1.0,10,0,0);
  p1->SetNumber(1);
  p1->SetBottomMargin(0);
  p1->Draw();
  TPad* p2 = new TPad("ratio","ratio",0.0,0.0,1.0,0.2,10,0,0);
  p2->SetTopMargin(0);
  p2->SetBottomMargin(0.5);
  p2->SetNumber(2);
  p2->Draw();
  c1->cd(1);
  hist_data->Draw();
  hist_data->Draw();
  hist_mc->SetLineColor(2);
  hist_mc->Draw("same hist");
  TH1 *ratio_hist = (TH1*) hist_data->Clone("clone_hist_data");
  ratio_hist->Divide(hist_mc);
  float xmin = ratio_hist->GetBinLowEdge(1);
  float xmax = ratio_hist->GetBinLowEdge(ratio_hist->GetNbinsX())+ratio_hist->GetBinWidth(ratio_hist->GetNbinsX());
  c1->cd(2);
  TH1* frame;
  frame=gPad->DrawFrame(xmin, 0.5, xmax, 1.5);
  frame->GetYaxis()->SetLabelSize(0.1);
  frame->GetXaxis()->SetLabelSize(0.2);
  ratio_hist->Draw("same");
  TLine *line = new TLine(xmin,1,xmax,1);
  line->SetLineStyle(2);
  line->SetLineWidth(2);
  line->Draw();
  //c1->SaveAs(Form("hist/compare_data_mc_distance_to_wall_thr%d.pdf",dwall_thr[d]));
  c1->SaveAs(Form("hist/compare_data_mc_distance_to_wall_%s.pdf",sk_period.c_str()));
  float evt_dwall_thr_data = hist_data->Integral(13,20);//600 < Dwall < 1000 cm
  float evt_dwall_thr_mc = hist_mc->Integral(13,20);
  cout << "events in 600<Dwall<1200cm data/mc=" << evt_dwall_thr_data << "/" << evt_dwall_thr_mc << endl;
  float norm_factor = evt_dwall_thr_data/evt_dwall_thr_mc;
  cout << "norm_factor=" << norm_factor << endl;
  TH1* norm_hist_mc = (TH1*) hist_mc->Clone("norm_hist_mc");
  norm_hist_mc->Scale(norm_factor);
  norm_hist_mc->SetLineColor(4);
  norm_hist_mc->SetLineWidth(2);
  TCanvas *c2 = new TCanvas("c2","",800,600);
  TPad* p3 = new TPad("main","main",0.0,0.2,1.0,1.0,10,0,0);
  p3->SetNumber(1);
  p3->SetBottomMargin(0);
  p3->Draw();
  TPad* p4 = new TPad("ratio","ratio",0.0,0.0,1.0,0.2,10,0,0);
  p4->SetTopMargin(0);
  p4->SetBottomMargin(0.5);
  p4->SetNumber(2);
  p4->Draw();
  c2->cd(1);
  hist_data->Draw();
  norm_hist_mc->Draw("same hist");
  TH1 *ratio_hist2 = (TH1*) hist_data->Clone("clone_hist_data");
  ratio_hist2->Divide(norm_hist_mc);
  c2->cd(2);
  TH1* frame2;
  frame2=gPad->DrawFrame(xmin, 0.5, xmax, 1.5);
  frame2->GetYaxis()->SetLabelSize(0.1);
  frame2->GetXaxis()->SetLabelSize(0.2);
  ratio_hist2->Draw("same");
  line->Draw();
  c2->SaveAs(Form("hist/compare_data_mc_distance_to_wall_scaled_600_1000_%s.pdf",sk_period.c_str()));
  float evt_fv_data = hist_data->Integral(5,36);
  float evt_fv_mc = norm_hist_mc->Integral(5,36);
  cout << "events in FV data/scale_mc=" << evt_fv_data << "/" << evt_fv_mc << endl;
  float sum_mc=0.,sum_data=0.,sum_mc_norm=0.,sumerr_mc=0.,sumerr_data=0.,sumerr_mc_norm=0.;;
  for(int b=5;b<37;b++){
    float evt_mc = hist_mc->GetBinContent(b);
    float err_mc = hist_mc->GetBinError(b);
    float evt_mc_norm = norm_hist_mc->GetBinContent(b);
    float err_mc_norm = norm_hist_mc->GetBinError(b);
    float evt_data = hist_data->GetBinContent(b);
    float err_data = hist_data->GetBinError(b);
    //cout << "bin" << b << " evt_mc=" << evt_mc << " +- " << err_mc << endl;
    //cout << "bin" << b << " evt_mc_norm=" << evt_mc_norm << " +- " << err_mc_norm << endl;
    //cout << "bin" << b << " evt_data=" << evt_data << " +- " << err_data << endl;
    sum_mc += evt_mc;
    sum_mc_norm += evt_mc_norm;
    sumerr_mc += err_mc*err_mc;
    sumerr_mc_norm += err_mc_norm*err_mc_norm;
    sum_data += evt_data;
    sumerr_data += err_data*err_data;
  }
  cout << "events in FV data =" << sum_data << " +- " << sqrt(sum_data) << endl;
  //cout << "events in FV mc =" << sum_mc << " +- " << sqrt(sumerr_mc) << endl;
  cout << "events in FV mc_norm =" << sum_mc_norm << " +- " << sqrt(sumerr_mc_norm) << endl;
  float diff = sum_data - sum_mc_norm;
  float diff_err = sqrt(sumerr_mc_norm);
  float diff_ratio = diff / sum_data;
  float diff_ratio_err = diff_ratio * sqrt(sum_data)/sum_data;
  cout << "data - mc = " << diff << " +- " << diff_err << endl;
  cout << "diff / data = " << diff_ratio << " +- " << diff_ratio_err << endl; 
}
