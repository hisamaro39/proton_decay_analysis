#include <vector>
void syst_ntag(){
  string mode = "p_eee";

  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(0);

  cout << "mode=" << mode << endl;
  TH1 *first_hist;
  TFile *input_mc = TFile::Open(Form("../output/fcmc.sk4.mode_%s_outsideSR.root",mode.c_str()));//mc
  TFile *input_data = TFile::Open(Form("../output/fcdt.sk4.mode_%s_outsideSR.root",mode.c_str()));//mc
  TH1* hist_mc = (TH1*) input_mc->Get("ntag_multiplicity_cut5_nring1_mulike0_michel0");
  TH1* hist_data = (TH1*) input_data->Get("ntag_multiplicity_cut5_nring1_mulike0_michel0");
  hist_data->SetLineWidth(2);
  hist_mc->SetLineWidth(2);
  cout << "entries data/mc=" << hist_data->GetEntries() << "/" << hist_mc->GetEntries() << endl;
  TCanvas *c1 = new TCanvas("c1","",800,600);
  TPad* p1 = new TPad("main","main",0.0,0.2,1.0,1.0,10,0,0);
  p1->SetNumber(1);
  p1->SetBottomMargin(0);
  p1->Draw();
  TPad* p2 = new TPad("ratio","ratio",0.0,0.0,1.0,0.2,10,0,0);
  p2->SetTopMargin(0);
  p2->SetBottomMargin(0.5);
  p2->SetNumber(2);
  p2->Draw();
  c1->cd(1);
  hist_data->Draw();
  hist_mc->SetLineColor(2);
  hist_mc->Draw("same hist");
  TH1 *ratio_hist = (TH1*) hist_mc->Clone("clone_hist_mc");
  ratio_hist->Divide(hist_data);
  float xmin = ratio_hist->GetBinLowEdge(1);
  float xmax = ratio_hist->GetBinLowEdge(ratio_hist->GetNbinsX())+ratio_hist->GetBinWidth(ratio_hist->GetNbinsX());
  c1->cd(2);
  TH1* frame;
  frame=gPad->DrawFrame(xmin, 0.5, xmax, 3);
  frame->GetYaxis()->SetLabelSize(0.1);
  frame->GetXaxis()->SetLabelSize(0.2);
  ratio_hist->Draw("same");
  TLine *line = new TLine(xmin,1,xmax,1);
  line->SetLineStyle(2);
  line->SetLineWidth(2);
  line->Draw();
  TLine *line2 = new TLine(xmin,2,xmax,2);
  line2->SetLineStyle(2);
  line2->Draw();
  c1->SaveAs(Form("hist/compare_data_mc_ntag_%s.pdf",mode.c_str()));
  float evt_data = hist_data->Integral();
  float evt_mc = hist_mc->Integral();
  float norm_factor = evt_data/evt_mc;
  cout << "total events data/mc=" << evt_data << "/" << evt_mc << endl;
  cout << "norm_factor=" << norm_factor << endl;
  float zero_decaye_data = hist_data->GetBinContent(1);
  float zero_decaye_mc = hist_mc->GetBinContent(1);
  float one_decaye_data = hist_data->GetBinContent(2);
  float one_decaye_mc = hist_mc->GetBinContent(2);
  if(mode=="onemulike") cout << "one decayE ecvents data/mc=" << one_decaye_data << "/" << one_decaye_mc << endl;
  if(mode=="oneelike") cout << "zero decayE ecvents data/mc=" << zero_decaye_data << "/" << zero_decaye_mc << endl;
  TH1* hist_mc_norm = (TH1*) hist_mc->Clone("hist_mc_norm");
  hist_mc_norm->Scale(norm_factor);
  hist_mc_norm->SetLineColor(4);
  hist_mc_norm->SetLineWidth(2);
  TCanvas *c2 = new TCanvas("c2","",800,600);
  TPad* p3 = new TPad("main","main",0.0,0.2,1.0,1.0,10,0,0);
  p3->SetNumber(1);
  p3->SetBottomMargin(0);
  p3->Draw();
  TPad* p4 = new TPad("ratio","ratio",0.0,0.0,1.0,0.2,10,0,0);
  p4->SetTopMargin(0);
  p4->SetBottomMargin(0.5);
  p4->SetNumber(2);
  p4->Draw();
  c2->cd(1);
  hist_data->Draw();
  hist_mc_norm->Draw("same hist");
  TH1 *ratio_hist_norm = (TH1*) hist_mc_norm->Clone("clone_hist_mc_norm");
  ratio_hist_norm->Divide(hist_data);
  c2->cd(2);
  TH1* frame2;
  frame2=gPad->DrawFrame(xmin, 0.5, xmax, 3);
  frame2->GetYaxis()->SetLabelSize(0.1);
  frame2->GetXaxis()->SetLabelSize(0.2);
  ratio_hist_norm->Draw("same");
  line->Draw();
  line2->Draw();
  c2->SaveAs(Form("hist/compare_data_mc_ntag_scaled_%s.pdf",mode.c_str()));
  float evt_mc_norm = hist_mc_norm->Integral();
  float zero_ntag_data = hist_data->GetBinContent(1);
  float zero_ntag_mc_norm = hist_mc_norm->GetBinContent(1);
  float err_zero_ntag_mc_norm = hist_mc_norm->GetBinError(1);
  cout << "total events data/scale_mc=" << evt_data << "/" << evt_mc_norm << endl;
  cout << "zero ntag ecvents data=" << zero_ntag_data << endl;
  cout << "zero ntag ecvents norm_mc=" << zero_ntag_mc_norm << " +- " << err_zero_ntag_mc_norm << endl;
  float diff = zero_ntag_data - zero_ntag_mc_norm;
  float diff_err = err_zero_ntag_mc_norm;
  float diff_ratio = diff / zero_ntag_data;
  float diff_ratio_err = err_zero_ntag_mc_norm / zero_ntag_data; 
  cout << "data - mc = " << diff << " +- " << diff_err << endl;
  cout << "diff / data = " << diff_ratio << " +- " << diff_ratio_err << endl; 

}
